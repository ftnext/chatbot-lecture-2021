HTMLを表示する
========================================

ブラウザで http://127.0.0.1:8000/ を開いたときに、いまはロケットのページが見えています。
これを、 **私たちが用意したHTMLが表示される** ように変更します。

HTMLを表示するためには
----------------------------------------

リクエストとレスポンス
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

登壇資料のスライド40〜47

* リクエスト： **URLやブラウザに入力したデータ** をリクエストとしてWebアプリのサーバに送信
* レスポンス：Webアプリは **処理結果（HTMLを含む）** をレスポンスとして、Webブラウザに返す

Djangoの流儀に則った開発項目
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

HTMLの表示には、以下の要素が必要です。

1. URL設定（アプリケーションのURL設定を追加）
2. ビュー（関数を追加）
3. テンプレートを追加

.. figure:: https://raw.githubusercontent.com/ftnext/2020_slides/master/docs/_images/spzcolab_Jan_django/2/8-urlconf_view_template.png

1つずつ見ていきましょう。

URL設定
--------------------

URL設定は、リクエストのURLを元に、ビューにある処理を呼び出します（登壇資料のスライド49〜52）。

.. figure:: https://raw.githubusercontent.com/ftnext/2020_slides/master/docs/_images/pycon_shizu_Feb_django_intro/2/4-urlconf.png

今回の作り方では、プロジェクトの :file:`settings.py` にて、プロジェクトの :file:`urls.py` が使われるように設定されています。

プロジェクトの :file:`urls.py`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

変更前
~~~~~~~~~~~~~~~~~~~~

.. code-block:: python
    :caption: app/djangochatbot/urls.py

    from django.contrib import admin
    from django.urls import path

    urlpatterns = [
        path('admin/', admin.site.urls),
    ]

ブラウザで http://127.0.0.1:8000/admin/ を開くと、Djangoが用意している管理画面にログインするための画面が表示されます。

URL設定の仕組み
~~~~~~~~~~~~~~~~~~~~

URL（例：http://127.0.0.1:8000/admin/ ）は3つに分かれます（登壇資料のスライド114）。

- プロトコル http
- ホスト 127.0.0.1:8000 （＝手元のPCの8000番ポート）
- パス admin/

URL設定は **パス** を見ます。

:file:`app/djangochatbot/urls.py` には「パスが ``"admin/"`` だったら、Djangoで用意している管理画面用のURL設定に沿って動作する」指定です。

.. note:: ブラウザでは普段ドメイン名を入力しますよね（例：https://www.google.com/ ）
    DNSという仕組みでドメイン名からIPアドレスに変換されています

URL設定に追加する
~~~~~~~~~~~~~~~~~~~~

ブラウザで http://127.0.0.1:8000/ を開いたときの動きを設定したいので、パスは ``""`` （空文字列）です。

以下のように設定します。

.. literalinclude:: ../../app/djangochatbot/urls.py
    :language: python
    :caption: app/djangochatbot/urls.py
    :lines: 16-22
    :emphasize-lines: 2, 6

``include`` のimportを追加します。
``path("", include("chat.urls"))`` は、「パスが ``"admin/"`` でない場合、chatアプリケーションの :file:`urls.py` にあるURL設定を使う」という指定です。

いまは :file:`app/chat/urs.py` がないので :command:`python manage.py runserver` はエラーを送出します（サーバは動いていません）。

.. note:: 今回作るチャットボットアプリは小さいですが、Djangoで一般的なプラクティスに沿って手順を書いています。
    例えばURL設定で ``include`` を使わずに、プロジェクトの :file:`urls.py` だけで進めることもできます。

    Djangoで一般的なプラクティスに従うことで、今は小さなチャットボットアプリでも今後機能追加がしやすくなります。

アプリケーションの :file:`urls.py`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:file:`app/chat/urs.py` を作りましょう。

.. code-block:: shell

    $ touch chat/urls.py

.. code-block:: python
    :caption: app/chat/urls.py
    :linenos:

    from django.urls import path

    from chat import views

    app_name = "chat"

    urlpatterns = [
        path("", views.home, name="home"),
    ]

このURL設定は、「パスが ``""`` （空文字列）のとき、:file:`chat/views.py` の ``home`` （関数）を呼び出す」としています。

:file:`chat/views.py` はアプリケーション作成時にできていますが、中身は空なので、 ``views.home`` がないというエラー（``AttributeError``）が送出されます（まだサーバは動いていません）。

.. hint:: 5行目の ``app_name`` もDjangoで一般的なプラクティスの1つです。
    複数のアプリケーションで同じ ``name`` のURL設定があったとしても、``<app_name>:<name>`` として区別できます。

ビュー
--------------------

ビューは、URL設定により呼び出され、リクエストを処理し、レスポンスを返します（登壇資料のスライド54〜58）。
実体は関数です（クラスで定義することもできますが、この講義では扱いません）。

:file:`chat/views.py` に ``home`` 関数を定義します。

.. code-block:: python
    :caption: app/chat/views.py
    :linenos:

    from django.shortcuts import render


    def home(request):
        return render(request, "chat/home.html")

URL設定により呼び出されるビューの関数は第1引数に ``request`` をとります（4行目）。
ここにはリクエストのデータが詰まっています。

``home`` 関数は :file:`chat/home.html` （テンプレート）を使ってレスポンスを組み立て、それを返しています（ブラウザに返ります）。

以上の設定で :command:`python manage.py runserver` は動作するようになりました。

ブラウザで http://127.0.0.1:8000/ を開いてみましょう。
すると、 ``TemplateDoesNotExist`` （テンプレートが存在しない）と表示されます。

テンプレート
--------------------

テンプレートは、Webアプリの見た目に関わります。
HTMLとDjango独自のタグで書かれます（登壇資料のスライド60〜66）。

今送出されているエラーは「テンプレートが存在しない」ですから、テンプレートを配置すれば解決します。
空のテンプレートを置きましょう。

空のテンプレートを置く
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:file:`manage.py` やプロジェクト、アプリケーションがあるディレクトリに :file:`templates` という名前のディレクトリを作ります。
ここに今回のアプリで使うテンプレートを置いていきます。

ビューで :file:`chat/home.html` というテンプレートを指定しているので、 :file:`chat` ディレクトリの中に :file:`home.html` を置きます。

.. code-block:: shell

    $ mkdir -p templates/chat
    $ touch templates/chat/home.html

:file:`settings.py` を変更
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:file:`templates` ディレクトリにテンプレートがあるという設定を追加します。

変更するのは ``TEMPLATES`` です。
これはリストで、要素は辞書です。
キー ``"DIRS"`` の値（``[]``）を書き換えます。

変更後
~~~~~~~~~~~~~~~~~~~~

.. literalinclude:: ../../app/djangochatbot/settings.py
    :language: python
    :caption: app/djangochatbot/settings.py
    :lines: 61-75
    :emphasize-lines: 4

.. hint:: ``BASE_DIR`` は ``pathlib`` の ``Path`` オブジェクトです（:file:`settings.py` の上部で定義されています）。
    ``Path`` オブジェクトは ``/`` 演算子で、新たなパスを作れます。

    .. code-block:: python

        >>> from pathlib import Path
        >>> Path("app")
        PosixPath('app')
        >>> Path("app") / "templates"
        PosixPath('app/templates')

ブラウザで http://127.0.0.1:8000/ を開くと、真っ白な画面が表示されます。
エラーがなくなりました！

いま :file:`chat/home.html` にはなにもHTMLを書いていないので、真っ白い画面が表示されます。
テンプレートにHTMLを書いてからブラウザをリロードすると反映されます（例：``<h1>こんにちは</h1>``）。

.. hint:: :file:`templates` ディレクトリを作るのもDjangoで一般的なプラクティスの1つです。
    アプリケーションの中に :file:`chat/templates/chat/home.html` を作るだけでもエラーは解決しますが、
    アプリケーションが増えたときに :file:`templates` ディレクトリにテンプレートがまとまっているというのは便利です。
